{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-server/testing/server.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,6CAA6C,EAAC,MAAM,mBAAmB;OACxE,EAAC,0BAA0B,EAAC,MAAM,2BAA2B;OAC7D,EAAC,gBAAgB,EAAmB,QAAQ,EAAiI,qBAAqB,EAAc,MAAM,eAAe;OACrO,EAAC,OAAO,EAAC,MAAM,uBAAuB;OACtC,EAAC,2BAA2B,EAA4E,MAAM,2CAA2C;OAEzJ,EAAC,OAAO,EAAC,MAAM,iBAAiB;OAGhC,EAAC,kCAAkC,EAAC,MAAM,eAAe;AAGhE;;;;GAIG;AACH,OAAO,MAAM,qBAAqB,GAAG,qBAAqB,CACtD,0BAA0B,EAAE,eAAe,EAAE,kCAAkC,CAAC,CAAC;AAErF;;GAEG;AACH,OAAO,MAAM,qBAAqB,GAAG,qBAAqB,CAAC;AAC3D;AAKA,CAAC;AAJD,kBAAkB;AACX,8BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAC,OAAO,EAAE,CAAC,2BAA2B,CAAC,EAAC,EAAG,EAAE;CACrE,CACA;AAED;;;;;GAKG;AACH,OAAO,MAAM,8BAA8B;AACvC,+EAA+E;AAC/E,iCAAiC;AACjC,CAAC,CAAC,YAAmB;QACnB,MAAM,uBAAuB,GAAG,6CAA6C,CAAC,YAAY,CAAC,CAAC;QAC5F,MAAM,WAAW,GAAG,qBAAqB,CAAC,qBAAqB,EAAE,yBAAyB,EAAE,CAAC;gBACjD,OAAO,EAAE,gBAAgB;gBACzB,QAAQ,EAAE,uBAAuB,CAAC,eAAe;gBACjD,KAAK,EAAE,IAAI;aACZ,CAAC,CAAC,EAAE,CAAC;QAChD;QAQN,CAAC;QAPK,kBAAkB;QACjB,4BAAU,GAA0B;YAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;wBACjB,OAAO,EAAE,CAAC,mBAAmB,CAAC;wBAC9B,YAAY,EAAE,CAAC,uBAAuB,CAAC,kBAAkB,CAAC;qBAC3D,EAAG,EAAE;SACX,CACA;QAEK,MAAM,YAAY,GAAG,OAAO,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;QACjF,MAAM,OAAO,GAAY,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACnD,uBAAuB,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;AAEP;;;;;GAKG;AACH,OAAO,MAAM,iCAAiC,GAA2C,EAAE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {analyzeAppProvidersForDeprecatedConfiguration} from '@angular/compiler';\nimport {platformCoreDynamicTesting} from '@angular/compiler/testing';\nimport {COMPILER_OPTIONS, CompilerFactory, NgModule, OpaqueToken, PLATFORM_COMMON_PROVIDERS, PLATFORM_INITIALIZER, PlatformRef, ReflectiveInjector, assertPlatform, createPlatform, createPlatformFactory, getPlatform} from '@angular/core';\nimport {TestBed} from '@angular/core/testing';\nimport {BrowserDynamicTestingModule, TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS, platformBrowserDynamicTesting} from '@angular/platform-browser-dynamic/testing';\n\nimport {Console} from '../core_private';\nimport {platformServer} from '../index';\nimport {Parse5DomAdapter} from '../src/parse5_adapter';\nimport {INTERNAL_SERVER_PLATFORM_PROVIDERS} from '../src/server';\n\n\n/**\n * Platform for testing\n *\n * @experimental API related to bootstrapping are still under review.\n */\nexport const platformServerTesting = createPlatformFactory(\n    platformCoreDynamicTesting, 'serverTesting', INTERNAL_SERVER_PLATFORM_PROVIDERS);\n\n/**\n * @deprecated Use {@link platformServerTesting} instead\n */\nexport const serverTestingPlatform = platformServerTesting;\nexport class ServerTestingModule {\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{exports: [BrowserDynamicTestingModule]}, ] },\n];\n}\n\n/**\n * Providers of the `serverTestingPlatform` to be used for creating own platform based on this.\n *\n * @deprecated Use `platformServerTesting()` or create a custom platform factory via\n * `createPlatformFactory(platformServerTesting, ...)`\n */\nexport const TEST_SERVER_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    // Note: This is not a real provider but a hack to still support the deprecated\n    // `setBaseTestProviders` method!\n    [(appProviders: any[]) => {\n      const deprecatedConfiguration = analyzeAppProvidersForDeprecatedConfiguration(appProviders);\n      const platformRef = createPlatformFactory(platformServerTesting, 'serverTestingDeprecated', [{\n                                                  provide: COMPILER_OPTIONS,\n                                                  useValue: deprecatedConfiguration.compilerOptions,\n                                                  multi: true\n                                                }])();\n      class DynamicTestModule {\n      /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n        exports: [ServerTestingModule],\n        declarations: [deprecatedConfiguration.moduleDeclarations]\n      }, ] },\n];\n}\n\n      const testInjector = TestBed.initTestEnvironment(DynamicTestModule, platformRef);\n      const console: Console = testInjector.get(Console);\n      deprecatedConfiguration.deprecationMessages.forEach((msg) => console.warn(msg));\n    }];\n\n/**\n * @deprecated Use initTestEnvironment with ServerTestModule instead. This is empty for backwards\n * compatibility,\n * as all of our bootstrap methods add a module implicitly, i.e. keeping this filled would add the\n * providers 2x.\n */\nexport const TEST_SERVER_APPLICATION_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}